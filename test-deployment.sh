#!/bin/bash

# Script de test de d√©ploiement avec authentification SSH par mot de passe
# Usage: ./test-deployment.sh [SERVER_IP] [SSH_USER] [SSH_PORT]

set -e

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_message() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

# V√©rifier les arguments
if [ $# -lt 2 ]; then
    echo "Usage: $0 <SERVER_IP> <SSH_USER> [SSH_PORT]"
    echo "Exemple: $0 192.168.1.100 ubuntu 2222"
    echo "Exemple: $0 votre-domaine.com root 22"
    exit 1
fi

SERVER_IP=$1
SSH_USER=$2
SSH_PORT=${3:-22}  # Port par d√©faut 22 si non sp√©cifi√©

print_step "üß™ Test de d√©ploiement vers $SERVER_IP:$SSH_PORT avec l'utilisateur $SSH_USER"

# 1. V√©rifier que le fichier .env existe
if [ ! -f .env ]; then
    print_error "Le fichier .env n'existe pas"
    print_message "Cr√©ation du fichier .env..."
    cat > .env << 'EOF'
# Configuration de la base de donn√©es MySQL
DB_HOST=db
DB_USER=iven_user
DB_PASSWORD=IvenSecureDB2024!
DB_NAME=iven_db
DB_ROOT_PASSWORD=IvenRootSecure2024!

# Configuration JWT (cl√© secr√®te g√©n√©r√©e)
JWT_SECRET=iven_jwt_secret_key_2024_very_long_and_complex_for_security_123456789

# Configuration MongoDB (optionnel pour l'instant)
MONGO_URI=mongodb://localhost:27017/iven

# Configuration Email (√† configurer selon vos besoins)
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USER=votre_email@gmail.com
EMAIL_PASS=votre_mot_de_passe_application

# Configuration du serveur
PORT=3000
NODE_ENV=production
EOF
    print_message "‚úÖ Fichier .env cr√©√©"
fi

print_message "‚úÖ Fichier .env trouv√©"

# 2. Tester la connexion SSH avec sshpass
print_step "Test de connexion SSH sur le port $SSH_PORT..."

# V√©rifier si sshpass est install√©
if ! command -v sshpass &> /dev/null; then
    print_warning "sshpass n'est pas install√©"
    print_message "Installation de sshpass..."
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        brew install sshpass
    else
        # Linux
        sudo apt-get install sshpass
    fi
fi

# Demander le mot de passe SSH
echo -n "Entrez le mot de passe SSH pour $SSH_USER@$SERVER_IP:$SSH_PORT: "
read -s SSH_PASSWORD
echo ""

# Tester la connexion avec le port sp√©cifique
if sshpass -p "$SSH_PASSWORD" ssh -p $SSH_PORT -o ConnectTimeout=10 -o StrictHostKeyChecking=no $SSH_USER@$SERVER_IP "echo 'Connexion SSH r√©ussie'" 2>/dev/null; then
    print_message "‚úÖ Connexion SSH r√©ussie sur le port $SSH_PORT"
else
    print_error "‚ùå Impossible de se connecter au serveur"
    print_message "V√©rifiez :"
    echo "  - L'IP du serveur est correcte"
    echo "  - Le port SSH est correct ($SSH_PORT)"
    echo "  - L'utilisateur SSH existe"
    echo "  - Le mot de passe est correct"
    echo "  - Le serveur est accessible"
    exit 1
fi

# 3. Pr√©parer les fichiers pour le serveur
print_step "Pr√©paration des fichiers..."

# Cr√©er un tar.gz avec les fichiers n√©cessaires
tar -czf iven-api-test.tar.gz \
    --exclude=node_modules \
    --exclude=.git \
    --exclude=logs \
    --exclude=uploads \
    --exclude=.DS_Store \
    --exclude=*.log \
    .

print_message "‚úÖ Archive cr√©√©e : iven-api-test.tar.gz"

# 4. Transf√©rer les fichiers vers le serveur
print_step "Transfert des fichiers vers le serveur..."
if sshpass -p "$SSH_PASSWORD" scp -P $SSH_PORT -o StrictHostKeyChecking=no iven-api-test.tar.gz $SSH_USER@$SERVER_IP:/tmp/; then
    print_message "‚úÖ Fichiers transf√©r√©s"
else
    print_error "‚ùå Erreur lors du transfert des fichiers"
    exit 1
fi

# 5. Test de configuration sur le serveur
print_step "Test de configuration sur le serveur..."

sshpass -p "$SSH_PASSWORD" ssh -p $SSH_PORT -o StrictHostKeyChecking=no $SSH_USER@$SERVER_IP << 'EOF'
    set -e
    
    echo "üß™ Test de configuration sur le serveur..."
    
    # V√©rifier l'OS
    echo "üìã Informations syst√®me :"
    echo "  - OS: $(lsb_release -d | cut -f2)"
    echo "  - Architecture: $(uname -m)"
    echo "  - M√©moire: $(free -h | grep Mem | awk '{print $2}')"
    echo "  - Espace disque: $(df -h / | tail -1 | awk '{print $4}') libre"
    
    # V√©rifier Docker
    echo "üê≥ V√©rification Docker..."
    if command -v docker &> /dev/null; then
        echo "  ‚úÖ Docker install√©: $(docker --version)"
    else
        echo "  ‚ùå Docker non install√©"
    fi
    
    # V√©rifier Docker Compose
    if command -v docker-compose &> /dev/null; then
        echo "  ‚úÖ Docker Compose install√©: $(docker-compose --version)"
    else
        echo "  ‚ùå Docker Compose non install√©"
    fi
    
    # Cr√©er le r√©pertoire de test
    echo "üìÅ Cr√©ation du r√©pertoire de test..."
    sudo mkdir -p /opt/iven-api-test
    sudo chown $USER:$USER /opt/iven-api-test
    cd /opt/iven-api-test
    
    # Extraire les fichiers
    echo "üì¶ Extraction des fichiers..."
    tar -xzf /tmp/iven-api-test.tar.gz
    
    # V√©rifier les fichiers essentiels
    echo "üîç V√©rification des fichiers..."
    required_files=("Dockerfile" "docker-compose.yml" "package.json" "server.js" "init.sql")
    for file in "${required_files[@]}"; do
        if [ -f "$file" ]; then
            echo "  ‚úÖ $file"
        else
            echo "  ‚ùå $file manquant"
        fi
    done
    
    # Test de syntaxe Docker Compose
    echo "üîß Test de syntaxe Docker Compose..."
    if docker-compose config > /dev/null 2>&1; then
        echo "  ‚úÖ Syntaxe Docker Compose valide"
    else
        echo "  ‚ùå Erreur de syntaxe Docker Compose"
        docker-compose config
    fi
    
    # Test de build Docker (optionnel)
    echo "üèóÔ∏è Test de build Docker..."
    if docker build -t iven-api-test . > /dev/null 2>&1; then
        echo "  ‚úÖ Build Docker r√©ussi"
    else
        echo "  ‚ùå Erreur de build Docker"
    fi
    
    # Nettoyer
    rm -f /tmp/iven-api-test.tar.gz
    cd /
    sudo rm -rf /opt/iven-api-test
    
    echo "‚úÖ Test de configuration termin√©"
EOF

# 6. Nettoyer
rm iven-api-test.tar.gz

print_message "‚úÖ Test de d√©ploiement termin√© !"

print_message ""
print_message "üìã R√©sum√© du test :"
echo "  ‚úÖ Connexion SSH fonctionnelle sur le port $SSH_PORT"
echo "  ‚úÖ Transfert de fichiers r√©ussi"
echo "  ‚úÖ Configuration serveur v√©rifi√©e"
echo "  ‚úÖ Docker et Docker Compose test√©s"
echo "  ‚úÖ Syntaxe Docker Compose valide"
echo "  ‚úÖ Build Docker r√©ussi"

print_message ""
print_message "üöÄ Pr√™t pour le d√©ploiement r√©el !"
echo ""
print_message "Pour d√©ployer :"
echo "  ./setup-server.sh $SERVER_IP $SSH_USER $SSH_PORT"
echo ""
print_message "Note : Le script de d√©ploiement vous demandera le mot de passe SSH"
